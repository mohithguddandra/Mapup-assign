{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\Mapup assignment\\\\half-ui\\\\src\\\\components\\\\Floating.js\",\n  _s = $RefreshSig$();\nimport \"antd/dist/reset.css\";\nimport { Select, Button, Card } from \"antd\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport axios from \"axios\";\nimport { setRegion, setRegionInfo, setCoordinates } from \"../actions\";\nimport \"../App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Option\n} = Select;\nconst Floating = () => {\n  _s();\n  const selectedRegion = useSelector(state => state.region.selectedRegion);\n  const regionInfo = useSelector(state => state.region.regionInfo); // Assuming regionInfo is stored in the 'region' slice of the Redux store\n  let countryData; // Use 'let' instead of 'const' since we might update its value later\n  let coordinates = useSelector(state => state.region.coordinates);\n  const dispatch = useDispatch();\n  const fetchRegionInfo = async region => {\n    try {\n      let response;\n      if (region === \"India\") {\n        response = await axios.get(`https://restcountries.com/v3.1/currency/INR`);\n      } else {\n        response = await axios.get(`https://restcountries.com/v3.1/name/${region}`);\n      }\n      countryData = response.data[0];\n      if (countryData) {\n        const {\n          name,\n          latlng,\n          timezones,\n          cca2\n        } = countryData;\n        const regionInfoText = `Region: ${name.common}\\nCoordinates: (${latlng[0]}, ${latlng[1]})${timezones ? `\\nTimezone: ${timezones}` : \"\"}${cca2 ? `\\nCountry Code: ${cca2}` : \"\"}`;\n        coordinates = [latlng[0], latlng[1]];\n        dispatch(setCoordinates(coordinates));\n        dispatch(setRegionInfo(regionInfoText)); // Update the 'regionInfo' in the Redux store\n      } else {\n        dispatch(setRegionInfo(\"Error: Region information not found.\"));\n      }\n    } catch (error) {\n      console.error(\"Error fetching region information:\", error);\n      dispatch(setRegionInfo(\"Error fetching region information. Please try again later.\"));\n    }\n  };\n  const handleLoadClick = () => {\n    switch (selectedRegion) {\n      case \"usa\":\n        fetchRegionInfo(\"United States\");\n        break;\n      case \"india\":\n        fetchRegionInfo(\"India\");\n        break;\n      case \"uk\":\n        fetchRegionInfo(\"United Kingdom\");\n        break;\n      default:\n        dispatch(setRegionInfo(\"Please select a region.\"));\n    }\n  };\n  const handleRegionChange = value => {\n    dispatch(setRegion(value));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"floating-controls\",\n    children: [/*#__PURE__*/_jsxDEV(Select, {\n      style: {\n        width: 200,\n        marginRight: 16\n      },\n      placeholder: \"Select a region\",\n      onChange: handleRegionChange,\n      value: selectedRegion || undefined,\n      children: [/*#__PURE__*/_jsxDEV(Option, {\n        value: \"usa\",\n        children: \"United States\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Option, {\n        value: \"india\",\n        children: \"India\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Option, {\n        value: \"uk\",\n        children: \"United Kingdom\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      type: \"primary\",\n      onClick: handleLoadClick,\n      children: \"Load\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-container\",\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        children: /*#__PURE__*/_jsxDEV(\"b\", {\n          children: regionInfo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_s(Floating, \"QVl8sdLy7wPpH1zLK4rEq0+dsSc=\", false, function () {\n  return [useSelector, useSelector, useSelector, useDispatch];\n});\n_c = Floating;\nexport default Floating;\nvar _c;\n$RefreshReg$(_c, \"Floating\");","map":{"version":3,"names":["Select","Button","Card","useDispatch","useSelector","axios","setRegion","setRegionInfo","setCoordinates","jsxDEV","_jsxDEV","Option","Floating","_s","selectedRegion","state","region","regionInfo","countryData","coordinates","dispatch","fetchRegionInfo","response","get","data","name","latlng","timezones","cca2","regionInfoText","common","error","console","handleLoadClick","handleRegionChange","value","className","children","style","width","marginRight","placeholder","onChange","undefined","fileName","_jsxFileName","lineNumber","columnNumber","type","onClick","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/Mapup assignment/half-ui/src/components/Floating.js"],"sourcesContent":["import \"antd/dist/reset.css\";\r\nimport { Select, Button, Card } from \"antd\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport axios from \"axios\";\r\nimport { setRegion, setRegionInfo, setCoordinates } from \"../actions\";\r\nimport \"../App.css\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst Floating = () => {\r\n  const selectedRegion = useSelector((state) => state.region.selectedRegion);\r\n  const regionInfo = useSelector((state) => state.region.regionInfo); // Assuming regionInfo is stored in the 'region' slice of the Redux store\r\n  let countryData; // Use 'let' instead of 'const' since we might update its value later\r\n  let coordinates = useSelector((state) => state.region.coordinates);\r\n  const dispatch = useDispatch();\r\n\r\n  const fetchRegionInfo = async (region) => {\r\n    try {\r\n      let response;\r\n      if (region === \"India\") {\r\n        response = await axios.get(\r\n          `https://restcountries.com/v3.1/currency/INR`\r\n        );\r\n      } else {\r\n        response = await axios.get(\r\n          `https://restcountries.com/v3.1/name/${region}`\r\n        );\r\n      }\r\n\r\n      countryData = response.data[0];\r\n\r\n      if (countryData) {\r\n        const { name, latlng, timezones, cca2 } = countryData;\r\n        const regionInfoText = `Region: ${name.common}\\nCoordinates: (${\r\n          latlng[0]\r\n        }, ${latlng[1]})${timezones ? `\\nTimezone: ${timezones}` : \"\"}${\r\n          cca2 ? `\\nCountry Code: ${cca2}` : \"\"\r\n        }`;\r\n        coordinates = [latlng[0], latlng[1]];\r\n        dispatch(setCoordinates(coordinates));\r\n\r\n        dispatch(setRegionInfo(regionInfoText)); // Update the 'regionInfo' in the Redux store\r\n      } else {\r\n        dispatch(setRegionInfo(\"Error: Region information not found.\"));\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching region information:\", error);\r\n      dispatch(\r\n        setRegionInfo(\r\n          \"Error fetching region information. Please try again later.\"\r\n        )\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleLoadClick = () => {\r\n    switch (selectedRegion) {\r\n      case \"usa\":\r\n        fetchRegionInfo(\"United States\");\r\n        break;\r\n      case \"india\":\r\n        fetchRegionInfo(\"India\");\r\n\r\n        break;\r\n      case \"uk\":\r\n        fetchRegionInfo(\"United Kingdom\");\r\n        break;\r\n      default:\r\n        dispatch(setRegionInfo(\"Please select a region.\"));\r\n    }\r\n  };\r\n\r\n  const handleRegionChange = (value) => {\r\n    dispatch(setRegion(value));\r\n  };\r\n\r\n  return (\r\n    <div className=\"floating-controls\">\r\n      <Select\r\n        style={{ width: 200, marginRight: 16 }}\r\n        placeholder=\"Select a region\"\r\n        onChange={handleRegionChange}\r\n        value={selectedRegion || undefined}\r\n      >\r\n        <Option value=\"usa\">United States</Option>\r\n        <Option value=\"india\">India</Option>\r\n        <Option value=\"uk\">United Kingdom</Option>\r\n      </Select>\r\n      <Button type=\"primary\" onClick={handleLoadClick}>\r\n        Load\r\n      </Button>\r\n      <div className=\"card-container\">\r\n        <Card>\r\n          <b>{regionInfo}</b>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Floating;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}